;;; -*- mode: scheme -*-

(defmodule Num

  ;; NaNs and Infinities.  Basically we just check that these are
  ;; translated correctly to the wasm syntax.

  (defvar+ f64_nan_1 f64 +nan.0)
  (defvar+ f64_nan_2 f64 D.+nan.0)
  (defvar+ f32_nan f32 F.+nan.0)

  (defvar+ f64_inf_1 f64 +inf.0)
  (defvar+ f64_inf_2 f64 D.+inf.0)
  (defvar+ f32_inf f32 F.+inf.0)

  (defvar+ f64_ninf_1 f64 -inf.0)
  (defvar+ f64_ninf_2 f64 D.-inf.0)
  (defvar+ f32_ninf f32 F.-inf.0)

  ;; Various obscure integers.  Note the prefix comes before the minus sign,
  ;; which is absurd but a consequence of using the Scheme parser.

  (defvar+ i32_neg_prefixed i32 I.-5)

  (defun+ (f -> f64)
    (+ +nan.0 +inf.0))

  (defun+ (g -> f32)
    (+ F.+nan.0 F.+inf.0))
)

(js "
Num.compile().then(function(module) {
  let m = new WebAssembly.Instance(m, {lib:Num.lib}).exports;
  assertEq(isNaN(m.f64_nan_1), true);
  assertEq(isNaN(m.f64_nan_2), true);
  assertEq(isNaN(m.f32_nan), true);

  assertEq(!isFinite(m.f64_inf_1), true);
  assertEq(!isFinite(m.f64_inf_2), true);
  assertEq(!isFinite(m.f32_inf), true);

  assertEq(m.f64_inf_1 > 0, true);
  assertEq(m.f64_inf_2 > 0, true);
  assertEq(m.f32_inf > 0, true);

  assertEq(!isFinite(m.f64_ninf_1), true);
  assertEq(!isFinite(m.f64_ninf_2), true);
  assertEq(!isFinite(m.f32_ninf), true);

  assertEq(m.f64_ninf_1 < 0, true);
  assertEq(m.f64_ninf_2 < 0, true);
  assertEq(m.f32_ninf < 0, true);
},
function(err) { throw err })
")
