;;; -*- mode: scheme -*-

(defmodule syntax_test

  (defun+ (t_begin (n i32) -> i32)
    (begin
      (+ n 1)
      (+ n 2)
      (+ n 3)))

  (defun+ (t_if (n i32) -> i32)
    (if (> n 3)
	(begin
	  (+ n 4)
	  (+ n 8))
	(begin
	  (+ n 1))))

  (defun+ (t_and (n i32) (m i32) -> i32)
    (and (= n 1) (= m 1)))

  (defun+ (t_or (n i32) (m i32) -> i32)
    (or (= n 1) (= m 1)))

  (defun+ (t_trap (n i32) -> i32)
    (if (= n 0)
	n
	(trap i32)))
  )

(js "
var i = new WebAssembly.Instance(syntax_test.module, {lib:syntax_test.lib}).exports;

assertEq(i.t_begin(5), 8);

assertEq(i.t_if(8), 16);
assertEq(i.t_if(3), 4);

assertEq(i.t_and(0, 0), 0);
assertEq(i.t_and(1, 0), 0);
assertEq(i.t_and(0, 1), 0);
assertEq(i.t_and(1, 1), 1);

assertEq(i.t_or(0, 0), 0);
assertEq(i.t_or(1, 0), 1);
assertEq(i.t_or(0, 1), 1);
assertEq(i.t_or(1, 1), 1);

assertEq(i.t_trap(0), 0);
var thrown = false; try { i.t_trap(1) } catch (e) { thrown = true }; assertEq(thrown, true);
")

(defmodule case_test
  (defconst g i32 5)
  (defun+ (t_case_1 (n i32) -> i32)
    (case n
      ((0) 1)
      ((1 2 g) 2)
      ((-1) 4)
      (else 3))))
      
(js "
var i = new WebAssembly.Instance(case_test.module, {lib:case_test.lib}).exports;
assertEq(i.t_case_1(0), 1);
assertEq(i.t_case_1(1), 2);
assertEq(i.t_case_1(2), 2);
assertEq(i.t_case_1(3), 3);
assertEq(i.t_case_1(4), 3);
assertEq(i.t_case_1(5), 2);
assertEq(i.t_case_1(6), 3);
assertEq(i.t_case_1(-1), 4);
assertEq(i.t_case_1(-2), 3);
")

(defmodule let_test

 (defun (g1 (v i32)) v)
 (defun (g2 (v i64)) v)
 (defun (g3 (v f64)) v)

 (defun+ (t1 (n i32))
   (let ((k 1)
	 (j 3.14)
	 (h L.0))
     (g1 k)
     (g3 j)
     (g2 h))
   (let ((k L.1)
	 (h 3)
	 (v 0.0))
     (g1 h)
     (g2 k)
     (g3 v)))

 (defun+ (t2 (n i32) (m i32) -> i32)
   (let ((n m)
	 (m n))
     (+ (* n 1000) m)))

 )

(js "
var ins = new WebAssembly.Instance(let_test.module, {lib:let_test.lib}).exports;
assertEq(ins.t1(10), undefined);
assertEq(ins.t2(1,2), 2001);
")

;; test inc! and dec! on both locals and globals and fields

(defmodule incdec_test

  (defclass Box
    (v1 i32)
    (v2 i32))

  (defun+ (test (key i32) -> i32)
    (let ((b (new Box 0 0)))
      (inc! (*v1 b))
      (dec! (*v2 b))
      (case key
	((0) (*v1 b))
	((1) (*v2 b))
	(else -10)))))

(js "
var ins = new WebAssembly.Instance(incdec_test.module, {lib:incdec_test.lib}).exports;
assertEq(ins.test(0), 1)
assertEq(ins.test(1), -1)
")

