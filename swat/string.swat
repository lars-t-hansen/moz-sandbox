;;; -*- mode: scheme -*-

(defmodule String

  (defun+ (swap (p String) -> String)
    (let* ((len (string-length p))
	   (a   (substring p 0 (div len 2)))
	   (b   (substring p (div len 2) len)))
      (string-append "hello" (string-append (string-append b a) "hello"))))

  (defun+ (get (p String) (n i32) -> i32)
    (string-ref p n))

  (defun+ (eq (p String) (q String) -> i32)
    (string=? p q))

  (defun+ (lt (p String) (q String) -> i32)
    (string<? p q))

  (defun+ (le (p String) (q String) -> i32)
    (string<=? p q))

  (defun+ (gt (p String) (q String) -> i32)
    (string>? p q))

  (defun+ (ge (p String) (q String) -> i32)
    (string>=? p q))

  (defun+ (short -> String)
    (string #\A #\B #\C #\D))

  (defun+ (long -> String)
    (string #\A #\B #\C #\D #\E #\F #\G #\H #\I #\J #\K #\L #\M))

  (defun+ (s2v (n i32) -> i32)
    (let* ((x "abcde")
	   (y (string->vector x)))
      (vector-ref y n)))

  (defun+ (v2s -> String)
    (let* ((v (new (Vector i32) 5 0)))
      (vector-set! v 0 #\a)
      (vector-set! v 1 #\b)
      (vector-set! v 2 #\c)
      (vector-set! v 3 #\d)
      (vector-set! v 4 #\e)
      (vector->string v)))
  )

(js "
String.compile().then(function(module) {
  var i = new WebAssembly.Instance(module, { lib: String.lib }).exports;
  assertEq(i.swap('hiho') + '', 'hellohohihello');
  assertEq(i.get('hiho', 0), 'h'.charCodeAt(0));
  assertEq(i.get('hiho', 1), 'i'.charCodeAt(0));
  assertEq(i.get('hiho', 2), 'h'.charCodeAt(0));
  assertEq(i.get('hiho', 3), 'o'.charCodeAt(0));
  assertEq(i.get('hiho', 4), 0);		// Dodgy
  assertEq(i.eq('hiho', 'hiho'), 1);
  assertEq(i.eq('hiho', 'hihoo'), 0);
  assertEq(i.eq('hihoo', 'hiho'), 0);
  assertEq(i.lt('hiho', 'hiho'), 0);
  assertEq(i.lt('hiho', 'hihoo'), 1);
  assertEq(i.lt('hihoo', 'hiho'), 0);
  assertEq(i.le('hiho', 'hiho'), 1);
  assertEq(i.le('hiho', 'hihoo'), 1);
  assertEq(i.le('hihoo', 'hiho'), 0);
  assertEq(i.gt('hiho', 'hiho'), 0);
  assertEq(i.gt('hiho', 'hihoo'), 0);
  assertEq(i.gt('hihoo', 'hiho'), 1);
  assertEq(i.ge('hiho', 'hiho'), 1);
  assertEq(i.ge('hiho', 'hihoo'), 0);
  assertEq(i.ge('hihoo', 'hiho'), 1);
  assertEq(i.short() + '', 'ABCD');
  assertEq(i.long() + '', 'ABCDEFGHIJKLM');
  assertEq(i.s2v(0), 'a'.charCodeAt(0));
  assertEq(i.s2v(3), 'd'.charCodeAt(0));
  assertEq(i.v2s() + '', 'abcde');
},
function(err) { throw err })
")
